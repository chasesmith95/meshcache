{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n\n    return new Observable(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    } else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}","map":{"version":3,"sources":["../../../src/internal/observable/from.ts"],"names":[],"mappings":"AAAA;AACA,SAAS,UAAT,QAA0B,eAA1B;AACA,SAAS,SAAT,QAAsB,mBAAtB;AACA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,mBAAT,QAA2B,6BAA3B;AACA,SAAS,UAAT,QAA0B,oBAA1B;AACA,SAAS,SAAT,QAAsB,aAAtB;AACA,SAAS,WAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAAyB,gBAAzB;AACA,SAAS,cAAT,QAA4B,kBAA5B;AAuFA,SAAM,WAAN,QAAmD,qBAAnD;AACE,OAAA,SAAK,IAAL,CAAgB,KAAhB,EAAgB,SAAhB,EAAgB;MACd,CAAA,S,EAAS;QACP,KAAA,YAAa,U,EAAA;AACd,aAAA,KAAA;AACD;;AACD,WAAA,IAAA,UAAA,CAAA,WAAA,CAAA,KAAA,CAAA,CAAA;AAED;;MACE,KAAI,IAAA,I,EAAA;QACF,mBAAO,CAAA,KAAA,C,EAAoB;AAC5B,aAAA,cAAA,CAAA,KAAA,EAAA,SAAA,CAAA;AAAM,K,MACL,IAAA,SAAO,CAAA,KAAA,CAAP,EAAmB;AACpB,aAAA,WAAA,CAAA,KAAA,EAAA,SAAA,CAAA;AAAM,KADL,MAEA,IAAA,WAAgB,CAAC,KAAD,CAAhB,EAAwB;AACzB,aAAA,SAAA,CAAA,KAAA,EAAA,SAAA,CAAA;AAAO,KADN,MAEA,IAAA,UAAO,CAAA,KAAA,CAAP,IAAyB,OAAE,KAAF,KAAa,QAAtC,EAAsC;AACvC,aAAA,YAAA,CAAA,KAAA,EAAA,SAAA,CAAA;AACF;AAED;;AACD,QAAA,IAAA,SAAA,CAAA,CAAA,KAAA,KAAA,IAAA,IAAA,OAAA,KAAA,IAAA,KAAA,IAAA,oBAAA,CAAA","sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isPromise,_util_isArrayLike,_util_isInteropObservable,_util_isIterable,_fromArray,_fromPromise,_fromIterable,_fromObservable,_util_subscribeTo PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nexport function from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable) {\n            return input;\n        }\n        return new Observable(subscribeTo(input));\n    }\n    if (input != null) {\n        if (isInteropObservable(input)) {\n            return fromObservable(input, scheduler);\n        }\n        else if (isPromise(input)) {\n            return fromPromise(input, scheduler);\n        }\n        else if (isArrayLike(input)) {\n            return fromArray(input, scheduler);\n        }\n        else if (isIterable(input) || typeof input === 'string') {\n            return fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n//# sourceMappingURL=from.js.map\n"]},"metadata":{},"sourceType":"module"}