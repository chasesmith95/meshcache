{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  if (!scheduler) {\n    return new Observable(subscribeToIterable(input));\n  } else {\n    return new Observable(function (subscriber) {\n      var sub = new Subscription();\n      var iterator;\n      sub.add(function () {\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(function () {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n\n          var value;\n          var done;\n\n          try {\n            var result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}","map":{"version":3,"sources":["../../../src/internal/observable/fromIterable.ts"],"names":[],"mappings":"AAAA;AAEA,SAAS,UAAT,QAAuB,eAAvB;AACA,SAAS,YAAT,QAAqB,iBAArB;AACA,SAAS,QAAA,IAAA,eAAT,QAAoC,oBAApC;AAEA,SAAM,mBAAN,QAAoD,6BAApD;AACE,OAAA,SAAY,YAAZ,CAAY,KAAZ,EAAY,SAAZ,EAAY;MACV,CAAA,K,EAAM;AACP,UAAA,IAAA,KAAA,CAAA,yBAAA,CAAA;AACD;;MACE,CAAA,S,EAAW;AACZ,WAAA,IAAA,UAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,CAAA;AAAM,G,MACL;AACE,WAAA,IAAS,UAAT,CAAgB,UAAc,UAAd,EAAe;AAC/B,UAAI,GAAA,GAAA,IAAsB,YAAtB,EAAJ;AACA,UAAI,QAAJ;UAEE,G,CAAI,YAAY;YACd,QAAQ,IAAC,OAAS,QAAA,CAAA,MAAT,KAAS,U,EAAA;AACnB,UAAA,QAAA,CAAA,MAAA;AACA;AACH,O;UACE,G,CAAA,SAAW,CAAA,QAAX,CAAiB,YAAkB;AACnC,QAAA,QAAQ,GAAA,KAAA,CAAS,eAAT,CAAA,EAAR;YACE,G,CAAI,SAAA,CAAU,QAAV,CAAmB,YAAA;cACrB,UAAO,CAAA,M,EAAA;AACR;AACD;;AACA,cAAI,KAAJ;AACA,cAAI,IAAJ;;cACE;AACA,gBAAA,MAAQ,GAAA,QAAa,CAAA,IAAb,EAAR;AACA,YAAA,KAAI,GAAG,MAAO,CAAA,KAAd;AACD,YAAA,IAAA,GAAA,MAAA,CAAA,IAAA;AAAC,W,CACA,OAAA,GAAA,EAAA;AACA,YAAA,UAAO,CAAA,KAAP,CAAO,GAAP;AACD;AACD;;cACE,I,EAAA;AACD,YAAA,UAAA,CAAA,QAAA;AAAM,W,MACL;AACA,YAAA,UAAK,CAAA,IAAL,CAAgB,KAAhB;AACD,iBAAA,QAAA;AACC;AACF,SApBI,C;AAqBR,OAvBE,C;AAwBD,aAAA,GAAA;AACJ,KAlCG,CAAA;AAmCL","sourcesContent":["/** PURE_IMPORTS_START _Observable,_Subscription,_symbol_iterator,_util_subscribeToIterable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\nexport function fromIterable(input, scheduler) {\n    if (!input) {\n        throw new Error('Iterable cannot be null');\n    }\n    if (!scheduler) {\n        return new Observable(subscribeToIterable(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var iterator;\n            sub.add(function () {\n                if (iterator && typeof iterator.return === 'function') {\n                    iterator.return();\n                }\n            });\n            sub.add(scheduler.schedule(function () {\n                iterator = input[Symbol_iterator]();\n                sub.add(scheduler.schedule(function () {\n                    if (subscriber.closed) {\n                        return;\n                    }\n                    var value;\n                    var done;\n                    try {\n                        var result = iterator.next();\n                        value = result.value;\n                        done = result.done;\n                    }\n                    catch (err) {\n                        subscriber.error(err);\n                        return;\n                    }\n                    if (done) {\n                        subscriber.complete();\n                    }\n                    else {\n                        subscriber.next(value);\n                        this.schedule();\n                    }\n                }));\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromIterable.js.map\n"]},"metadata":{},"sourceType":"module"}